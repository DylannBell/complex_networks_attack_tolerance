NOTES : 

    - Need to add own implementations later; don't just use networkx implementations!
    - Need to add seed to ensure we get the same results everytime
    - Need to ensure both graphs have the same number of links

DEFN : 

    The interconnectdness of a network is described by its diameter d, 
    defined as the average length of the shortest paths between any two nodes
    in the network

FUNCTIONS :

    CREATE
    def ER_graph(N, p) 
    def SF_graph(N)
    
    GET  
    def diameter(G)
    def largest_cluster(G)
    def average_size_cluster(G)
    def most_connected_nodes(G)
    
    DELETE
    def random_nodes(G, f)
    def connected_nodes(G, L)
    
    INIT
    def display_graph(G)
    def graph_results()

FUNCTION DESCRIPTION :

    ER_graph(N, p)
        N -> num. of nodes
        p -> prob. of two nodes being connected
    
    SF_graph(N)
        N -> num. of nodes
    
    display_graph(G)
        " Generates graphical display of graphs as seen in paper "
        G -> prev. generated graph

    diameter(G)
        " Gets diameter of graph, following the defintion above "
        G -> prev. generated graph
    
    random_nodes(G, f)
        G -> prev generated graph
        f -> fraction of nodes to be removed

    most_connected_nodes(G)
        " Returns a list of most connected nodes in descending order " 
        G -> prev generated graph

    connected_nodes(G, L)
        G -> prev generated graph
        L -> list of connected nodes

    S = largest_cluster(G)
        " Returns the size of the largest cluster S, as a fraction of the total system size "
        G -> prev. generated graph

    s = average_size_cluster(G)
        " Average size of the isolated clusters (all the clusters except the largest ones) "
        G -> prev. generated graph

    graph_results()
        " Reproduces results found in paper " 

EXPERIMENTS : 

    #1 - Changes in the diameter d of the network as a function of the fraction f of the removed nodes

        ER = ER_graph
        SF = SF_graph
        const f

        # error tolerance 
        random_nodes(ER, f)
        random_nodes(ER, f)
        graph_results()

        # ER attack
        ER_conn_nodes = most_connected_nodes(ER)
        connected_nodes(ER_conn_nodes)
        graph_results()

        # SF attack
        SF_conn_nodes = most_connected_nodes(SF)
        connected_nodes(SF_conn_nodes)
        graph_results()

    #2 - S and s as a function of the fraction of nodes removed from the network

        ER = ER_graph
        SF = SF_graph
        const f

        # Generate ER
        S = largest_cluster(ER)
        s = average_size_cluster(ER)
        
        # ER Err Tolerance
        random_nodes(ER,f)

        # ER Attack
        ER_conn_nodes = most_connected_nodes(ER)
        connected_nodes(ER_conn_nodes)

        # Graph RESULTS
        graph_results()

        # Do the same for SF

    #3 - Summary of the response of a network to failures or attacks

        # Not really sure...
